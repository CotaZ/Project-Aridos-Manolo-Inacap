use("Aridos_Manolo")

db.register_users.drop()
db.createCollection("register_users", {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['id_register_user', 'name', 'last_name', 'email', 'date_of_birth', 'age', 'expiration_date', 'status', 'country', 'id_sex', 'id_rol'],
            additionalProperties: true,
            properties: {
                id_register_user: {
                    bsonType: 'objectId',
                    description: "'id_register_user' must be a valid ObjectId and is required",
                },   
                name: {
                    bsonType: 'string',
                    description: "'name' must be a string and is required"
                },
                last_name: { // Corregido de 'lastname' a 'last_name'
                    bsonType: 'string',
                    description: "'last_name' must be a string and is required"
                },
                email: {
                    bsonType: 'string',
                    description: "'email' must be a string and is required",
                    pattern: "^[A-Za-z\\d.-]{1,}@[A-Za-z\\d.-]{1,}[.]{1}[A-Za-z\\d.-]{1,}$"
                },
                date_of_birth: {
                    bsonType: 'string',
                    description: "'date_of_birth' must be a string and is required"
                },
                password: {
                    bsonType: 'string',
                    description: "'password' must be a string and is required",
                    pattern: "^.{16,40}$"
                },
                age: {
                    bsonType: 'number',
                    minimum: 18,
                    maximum: 99
                },
                isSingle: {
                    bsonType: 'bool'
                },
                createdAt: {
                    bsonType: 'date', // Utiliza el tipo 'date' para almacenar la hora de creaci√≥n.
                    description: "'createdAt' must be a date and is required"
                },
                status: {
                    enum: ['active', 'inactive']
                },
                country: {
                    bsonType: 'string',
                    description: "'country' must be a string and is required" // Corregido de 'lastname' a 'country'
                },
                expiration_date: {
                    bsonType: 'date',
                    description: "'expiration_date' must be a date and is required"
                },
                id_rol: {
                    bsonType: 'objectId',
                    description: "'id_rol' must be a valid ObjectId and is required",
                },
                id_sex: {
                    bsonType: 'objectId',
                    description: "'id_sex' must be a valid ObjectId and is required",
                },
            }
        }
    }
})

use("Aridos_Manolo")

db.users_roles.drop()

db.createCollection("users_roles", {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['id_user_rol','id_rol', 'id_register_user'],
            additionalProperties: true,
            properties: { 
                id_user_rol: {
                    bsonType: 'objectId',
                    description: "'id_user_rol' must be a valid ObjectId and is required",

                }, 
                id_rol: {
                    bsonType: 'objectId',
                    description: "'id_rol' must be a valid ObjectId and is required",
                },
                id_register_user: {
                    bsonType: 'objectId',
                    description: "'id_register_user' must be a valid ObjectId and is required",
                },
            }
        }
    }
})

use("Aridos_Manolo")

db.sexs.drop()

db.createCollection("sexs", {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['id_sex', "sex"],
            additionalProperties: true,
            properties: { 
                id_sex: {
                    bsonType: 'objectId',
                    description: "'id_sex' must be a valid ObjectId and is required",
                },
                sex: {
                    enum: ['male', 'female']
                }
            }
        }
    }
})

use("Aridos_Manolo")

db.roles.drop()

db.createCollection("roles", {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['id_rol','role'],
            additionalProperties: true,
            properties: {
                id_rol: {
                    bsonType: 'objectId',
                    description: "'id_rol' must be a valid ObjectId and is required",
                },
                role: {
                    enum: ['admin', 'customer', 'developer']
                }
            }
        }
    }
})


